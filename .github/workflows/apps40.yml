on: [push]

name: apps40-full-cicd

env:
  resourceGroup: igniteapps40jd
  location: eastus
  SESSION_CODE: itt-apps40
  USER_ID: jessde
  subName: "Ignite The Tour"

  # container info
  containerRegistry: neilpeterson
  containerVersion: v2

  # tailwind deployment
  tailwindInfrastructure: deployment.json
  tailwindCharts: TailwindTraders-Backend/Deploy/helm
  tailwindChartValuesScript: helm-values/generate-config.ps1
  tailwindChartValues: values.yaml
  tailwindWebImages: TailwindTraders-Backend/Deploy/tt-images
  tailwindServiceAccount: TailwindTraders-Backend/Deploy/helm/ttsa.yaml

  # Github SECRETS
  sqlServerUser: sqladmin

jobs:
  deployInfra:
    runs-on: self-hosted
    steps:
    # checkout branch
    - name: git checkout master branch 
      uses: actions/checkout@master

    # log into Azure
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # create resource group
    - name: 'Create Resource Group'
      run: |
        az group create --subscription "$subName" --name $resourceGroup --location $location --tags ITT-Tracking=$SESSION_CODE CreatedBy=$USER_ID
    
    # create VNet
    - name: 'Create Virtual Network'
      run: |
        # run check for idempotent pipeline

        kubectl get nodes | grep "virtual-node-aci-linux" > /dev/null

        if [ $? -eq 0 ]; then
            echo 'Virtual network already exists'
        else
          echo 'Virtual network does not exist. Creating virtual network now.'

          # create vnet
          az network vnet create --resource-group $resourceGroup --name k8sVNet --subscription "$subName" --address-prefixes 10.0.0.0/8 --subnet-name k8sSubnet --subnet-prefix 10.240.0.0/16
        fi

    # create virtual node subnet
    - name: 'Create Virtual Node Subnet'
      run: |
        # run check for idempotent pipeline
        
        kubectl get nodes | grep "virtual-node-aci-linux" > /dev/null

        if [ $? -eq 0 ]; then
            echo 'Virtual node subnet already exists'
        else
          echo 'Virtual node subnet does not exist. Creating virtual subnet now.'

          # configure vnet subnet
          az network vnet subnet create --resource-group $resourceGroup --subscription "$subName" --vnet-name k8sVNet --name VNSubnet  --address-prefix 10.241.0.0/16
        fi
    
    # Deploy backend infrastructure
    - name: 'Setup Backend Infra'
      env:
        azureClientID: e13daae5-2cb2-4df1-ab7d-7dbe139e3e95
      run: |
        vnetID=$(az network vnet subnet show --resource-group $resourceGroup --vnet-name k8sVNet --name k8sSubnet --query id -o tsv)

        az group deployment create -g $resourceGroup --template-file $tailwindInfrastructure \
          --parameters servicePrincipalId=$azureClientID servicePrincipalSecret=${{ secrets.CLIENT_SECRET }} \
          sqlServerAdministratorLogin=$sqlServerUser sqlServerAdministratorLoginPassword=${{ secrets.sqlServePassword }} \
          aksVersion=1.14.8 pgversion=10 vnetSubnetID=$vnetID
        echo "::set-env name=AKS_CLUSTER::$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)"


    # Application Insights (using preview extension)
    - name: 'Create Application Insights'
      run: |
        az extension add -n application-insights
        instrumentationKey=$(az monitor app-insights component show --app tt-app-insights --resource-group $resourceGroup --query instrumentationKey -o tsv)

    # create postgres DB, Disable SSL, and set Firewall  
    - name: 'Create postgres DB, Disable SSL and set firewall'
      run: |
        POSTGRES=$(az postgres server list --resource-group $resourceGroup --query [0].name -o tsv)
        az postgres db create -g $resourceGroup -s $POSTGRES -n stockdb
        az postgres server update --resource-group $resourceGroup --name $POSTGRES --ssl-enforcement Disabled
        az postgres server firewall-rule create --resource-group $resourceGroup --server-name $POSTGRES --name AllowAllAzureIps --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
    
    - name: 'Install Virtual Node on K8s cluster'
      run: |
        # Capture Cluster Info in var

        # get kube context
        rm -rf ~/.kube/config
        az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin
        
        # run check for idempotent pipeline
        
        kubectl get nodes | grep "virtual-node-aci-linux" > /dev/null

        if [ $? -eq 0 ]; then
            echo 'Virtual node already exists'
        else
          echo 'Virtual node does not exist. Creating virtual now.'

          # Deploy virtual node 
          az aks enable-addons \
          --resource-group $resourceGroup  \
          --name $AKS_CLUSTER \
          --addons virtual-node \
          --subnet-name VNSubnet
        fi

    - name: 'Create k8s twt namespace'
      env:
        nameSpace: twt
      run: |
        # twt namespace
        kubectl get ns | grep $nameSpace > /dev/null

        if [ $? -eq 0 ]; then
            echo "Namespace $nameSpace already exists."
        else
          echo "Namespace $nameSpace does not exist. Creating $nameSpace namespace now."

          kubectl create namespace $nameSpace

          kubectl label namespace/$nameSpace purpose=prod-app
        fi

    - name: 'Create keda namespace'
      env:
        nameSpace: twt
      run: |
        # keda namespace
        kubectl get ns | grep keda > /dev/null

        if [ $? -eq 0 ]; then
            echo "Namespace keda already exists."
        else
          echo "Namespace keda does not exist. Creating keda namespace now."

          kubectl create namespace keda

        fi

    - name: 'Create k8s service account'
      env:
        nameSpace: twt
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        imagePullSecrets:
        - name: acr-auth
        metadata:
          name: ttsa
          namespace: $nameSpace
        EOF
  
  buildImages:
    runs-on: self-hosted
    needs: deployInfra
    steps:
      - name: 'Checkout TailwindTraders Backend Source'
        run: |
          # fresh download
          rm -rf TailwindTraders-Backend
          git clone https://github.com/microsoft/TailwindTraders-Backend.git

          #git -C TailwindTraders-Backend checkout ed86d5f  

      - name: 'Create Helm gvalues file'
        run: |
          pwsh $tailwindChartValuesScript -resourceGroup $resourceGroup -sqlPwd ${{ secrets.sqlServePassword }} -outputFile $tailwindChartValues

      - name: 'Get ACR Container Information'
        run: |
          echo "Retrieving Container Registry info..."
          CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query "[0].name")

          echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query "[0].name")"
          echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $CONTAINER_REGISTRY --query username -o tsv)"
          echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $CONTAINER_REGISTRY -o tsv --query passwords[0].value)"
          echo "::set-env name=dPath::$GITHUB_WORKSPACE/TailwindTraders-Backend/Source"


      # docker login
      - name: 'docker login'
        uses: greenie-msft/container-actions/docker-login@master
        with:
          login-server: $CONTAINER_REGISTRY
          username: $REGISTRY_USERNAME
          password: $REGISTRY_PASSWORD

      - name: 'build/push cart.api'
        run: |
          docker build $dPath/Services/Tailwind.Traders.Cart.Api/ -t $CONTAINER_REGISTRY/cart.api:$GITHUB_SHA

          #docker push

      - name: 'build/push product.api'
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Product.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/product.api:$GITHUB_SHA

          #docker push

      - name: 'build/push profile.api'
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Profile.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/profile.api:$GITHUB_SHA

          #docker push

      - name: 'build/push login.api'
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Login.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/login.api:$GITHUB_SHA

          #docker push

      - name: 'build/push coupon.api'
        run: |
          docker build $dPath/Services/Tailwind.Traders.Coupon.Api/ -t $CONTAINER_REGISTRY/coupon.api:$GITHUB_SHA

          #docker push

      - name: 'build/push popular-product.api'
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.PopularProduct.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/popular-product.api:$GITHUB_SHA

          #docker push
          
      - name: 'build/push stock.api'
        run: |
          docker build $dPath/Services/Tailwind.Traders.Stock.Api/ -t $CONTAINER_REGISTRY/stock.api:$GITHUB_SHA

          #docker push

      - name: 'build/push image-classifier.api'
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.ImageClassifier.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/image-classifier.api:$GITHUB_SHA

          #docker push

      - name: 'build/push mobileapigw'
        run: |
          docker build -f $dPath/ApiGWs/Tailwind.Traders.Bff/Dockerfile $dPath -t $CONTAINER_REGISTRY/mobileapigw:$GITHUB_SHA

          #docker push

      - name: 'build/push webapigw'
        run: |
          docker build -f $dPath/ApiGWs/Tailwind.Traders.WebBff/Dockerfile $dPath -t $CONTAINER_REGISTRY/webapigw:$GITHUB_SHA

          #docker push
      
      - name: 'buid/push web frontend'
        run: |
          rm -rf TailwindTraders-Website
          git clone https://github.com/neilpeterson/TailwindTraders-Website.git

          docker build $GITHUB_WORKSPACE/TailwindTraders-Website/Source/Tailwind.Traders.Web/ -t $CONTAINER_REGISTRY/web:$GITHUB_SHA

          # temp
          echo "::set-env name=AKS_CLUSTER::$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)"

  deployMicroservices:
    runs-on: self-hosted
    needs: buildImages
    steps:
      - name: 'deploy k8s helm charts'
        # TODO: need to break out into individual steps for each api; need to use variables from other jobs/steps
        env:
          nameSpace: twt
        run: |
          echo "::set-env name=AKS_CLUSTER::$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)"
          echo "::set-env name=INGRESS::$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)"

          AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)
          INGRESS=$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
          pictures=$(az storage account list -g $resourceGroup --query [0].primaryEndpoints.blob -o tsv)

          # twt login
          helm upgrade --install my-tt-login -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/login.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/login-api

          # twt product
          helm upgrade --install my-tt-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/product.api --set image.tag=$GITHUB_SHA --set inf.storage.productimages=${pictures}product-list --set inf.storage.productdetailimages=${pictures}product-detail $tailwindCharts/products-api --set az.productvisitsurl=http://your-product-visits-af-here

          # twt coupon
          helm upgrade --install my-tt-coupon -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/coupon.api --set image.tag=$GITHUB_SHA --set inf.storage.couponimage=${pictures}coupon-list $tailwindCharts/coupons-api

          # twt profile
          helm upgrade --install my-tt-profile -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/profile.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/profiles-api

          # twt popular product
          helm upgrade --install my-tt-popular-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/popular-product.api --set image.tag=$GITHUB_SHA --set initImage.repository=$containerRegistry/popular-product-seed.api --set initImage.tag=latest --set inf.storage.productimages=${pictures}product-list $tailwindCharts/popular-products-api

          # twt stock
          helm upgrade --install my-tt-stock -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/stock.api --set image.tag=$GITHUB_SHA $tailwindCharts/stock-api

          # twt image classifier
          helm upgrade --install my-tt-image-classifier -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/image-classifier.api --set image.tag=$GITHUB_SHA $tailwindCharts/image-classifier-api

          # twt cart
          helm upgrade --install my-tt-cart -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/cart.api --set image.tag=$GITHUB_SHA $tailwindCharts/cart-api --set B2C.clientID=none --set B2C.identityMetadata=none --set B2C.issuer=none --set B2C.policyName=none --set B2C.tenantID=none

          # twt mobile bff
          helm upgrade --install my-tt-mobilebff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/mobileapigw --set image.tag=$GITHUB_SHA --set probes.readiness=null $tailwindCharts/mobilebff

          # twt web bff
          helm upgrade --install my-tt-webbff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/webapigw --set image.tag=$GITHUB_SHA $tailwindCharts/webbff --set B2C.Authority=none --set B2C.B2CIssuer=none

          git clone https://github.com/neilpeterson/TailwindTraders-Website.git

          # twt web
          helm upgrade --install web -f TailwindTraders-Website/Deploy/helm/gvalues.yaml --namespace=$nameSpace --set ingress.protocol=http --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/web --set image.tag=$GITHUB_SHA TailwindTraders-Website/Deploy/helm/web/
      
      - name: 'Label all pods for network policy'
        run: |
          # remove label if exist
          kubectl label -n twt pods --all role- > /dev/null && echo "Removing pod labels if exist"
          
          # add label  
          kubectl label -n twt pods --all role=twt-app

      - name: 'Copy website images to storage'
        run: |
          STORAGE=$(az storage account list -g $resourceGroup -o table --query  [].name -o tsv)
          BLOB_ENDPOINT=$(az storage account list -g $resourceGroup --query [].primaryEndpoints.blob -o tsv)
          CONNECTION_STRING=$(az storage account show-connection-string -n $STORAGE -g $resourceGroup -o tsv)
          az storage container create --name "coupon-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-detail" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "profiles-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination coupon-list  --source $tailwindWebImages/coupon-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-detail --source $tailwindWebImages/product-detail --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-list --source $tailwindWebImages/product-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination profiles-list --source $tailwindWebImages/profiles-list --account-name $STORAGE

      - name: 'Setup scaling backend components'
        run: |
          # add kedacore repo
          helm repo add kedacore https://kedacore.github.io/charts
 
          
          # add stable repo for helm 3
          helm repo add stable http://storage.googleapis.com/kubernetes-charts

          # repo update
          helm repo update

          # keda install
          helm upgrade --install keda kedacore/keda --namespace keda

          # rabbitmq install
          helm upgrade --install rabbitmq --set rabbitmq.username=user,rabbitmq.password=PASSWORD stable/rabbitmq

          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: rabbitmq-consumer
            namespace: default
            labels:
              app: rabbitmq-consumer
          spec:
            selector:
              matchLabels:
                app: rabbitmq-consumer
            template:
              metadata:
                labels:
                  app: rabbitmq-consumer
              spec:
                containers:
                - name: rabbitmq-consumer
                  image: jeffhollan/rabbitmq-client:dev
                  imagePullPolicy: Always
                  command:
                    - receive
                  args:
                    - 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
                dnsPolicy: ClusterFirst
                nodeSelector:
                  kubernetes.io/role: agent
                  beta.kubernetes.io/os: linux
                  type: virtual-kubelet
                tolerations:
                - key: virtual-kubelet.io/provider
                  operator: Exists
                - key: azure.com/aci
                  effect: NoSchedule      
          ---
          apiVersion: keda.k8s.io/v1alpha1
          kind: ScaledObject
          metadata:
            name: rabbitmq-consumer
            namespace: default
            labels:
              deploymentName: rabbitmq-consumer
          spec:
            scaleTargetRef:
              deploymentName: rabbitmq-consumer
            pollingInterval: 5   # Optional. Default: 30 seconds
            cooldownPeriod: 30   # Optional. Default: 300 seconds
            maxReplicaCount: 30  # Optional. Default: 100
            triggers:
            - type: rabbitmq
              metadata:
                queueName: hello
                host: 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
                queueLength  : '5'
          EOF

      - name: 'Notes'
        run: |
          INGRESS=$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
  
          echo "*************** Connection Information ***************"
          echo "The Tailwind Traders Website can be accessed at:"
          echo "http://$INGRESS"
          echo ""
          echo "Run the following to connect to the AKS cluster:"
          echo "az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin"
          echo "******************************************************"
      # logout
      - name: 'Azure logout'
        run: |
          az logout