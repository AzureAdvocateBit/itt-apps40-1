on: [push]

name: apps40-full-cicd

env:
  resourceGroup: igniteapps40jd
  location: eastus
  SESSION_CODE: itt-apps40
  USER_ID: jessde
  subName: "Ignite The Tour"

  # container info
  acrName: igniteappsacr40jd
  acrVersion: v2

  # tailwind deployment
  tailwindInfrastructure: deployment.json
  tailwindCharts: TailwindTraders-Backend/Deploy/helm
  tailwindChartValuesScript: helm-values/generate-config.ps1
  tailwindChartValues: values.yaml
  tailwindWebImages: TailwindTraders-Backend/Deploy/tt-images
  tailwindServiceAccount: TailwindTraders-Backend/Deploy/helm/ttsa.yaml

  # Github SECRETS
  sqlServerUser: sqladmin

jobs:
  # uploadIaC:
  #   runs-on: self-hosted
  #   steps:
  #   # checkout code from repo
  #   - name: checkout repo
  #     uses: actions/checkout@v1
  #   # upload IaC folder
  #   - name: upload IaC
  #     uses: actions/upload-artifact@master
  #     with:
  #       name: IaC
  #       path: IaC
  deployInfra:
    runs-on: self-hosted
    steps:
    # checkout branch
    - name: git checkout master branch 
      uses: actions/checkout@master

    # log into Azure
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # create resource group
    - name: 'Create Resource Group'
      run: |
        az group create --subscription "$subName" --name $resourceGroup --location $location --tags ITT-Tracking=$SESSION_CODE CreatedBy=$USER_ID
    
    # create VNet
    - name: 'Create Virtual Network'
      run: |
        # run check for idempotent pipeline

        kubectl get nodes | grep "virtual-node-aci-linux"

        if [ $? -eq 0 ]; then
            echo 'Virtual network already exists'
        else
          echo 'Virtual network does not exist. Creating virtual network now.'

          # create vnet
          az network vnet create --resource-group $resourceGroup --name k8sVNet --subscription "$subName" --address-prefixes 10.0.0.0/8 --subnet-name k8sSubnet --subnet-prefix 10.240.0.0/16
        fi

    # create virtual node subnet
    - name: 'Create Virtual Node Subnet'
      run: |
        # run check for idempotent pipeline
        
        kubectl get nodes | grep "virtual-node-aci-linux"

        if [ $? -eq 0 ]; then
            echo 'Virtual node subnet already exists'
        else
          echo 'Virtual node subnet does not exist. Creating virtual subnet now.'

          # configure vnet subnet
          az network vnet subnet create --resource-group $resourceGroup --subscription "$subName" --vnet-name k8sVNet --name VNSubnet  --address-prefix 10.241.0.0/16
        fi
    
    # Deploy backend infrastructure
    - name: 'Setup Backend Infra'
      env:
        azureClientID: e13daae5-2cb2-4df1-ab7d-7dbe139e3e95
      run: |
        vnetID=$(az network vnet subnet show --resource-group $resourceGroup --vnet-name k8sVNet --name k8sSubnet --query id -o tsv)

        az group deployment create -g $resourceGroup --template-file $tailwindInfrastructure \
          --parameters servicePrincipalId=$azureClientID servicePrincipalSecret=${{ secrets.CLIENT_SECRET }} \
          sqlServerAdministratorLogin=$sqlServerUser sqlServerAdministratorLoginPassword=${{ secrets.sqlServePassword }} \
          aksVersion=1.14.8 pgversion=10 vnetSubnetID=$vnetID

    # Application Insights (using preview extension)
    - name: 'Create Application Insights'
      run: |
        az extension add -n application-insights
        instrumentationKey=$(az monitor app-insights component show --app tt-app-insights --resource-group $resourceGroup --query instrumentationKey -o tsv)

    # create postgres DB, Disable SSL, and set Firewall  
    - name: 'Create postgres DB, Disable SSL and set firewall'
      run: |
        POSTGRES=$(az postgres server list --resource-group $resourceGroup --query [0].name -o tsv)
        az postgres db create -g $resourceGroup -s $POSTGRES -n stockdb
        az postgres server update --resource-group $resourceGroup --name $POSTGRES --ssl-enforcement Disabled
        az postgres server firewall-rule create --resource-group $resourceGroup --server-name $POSTGRES --name AllowAllAzureIps --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
    
    # - name: 'Install Helm on K8s Cluster'
    #   run: |
    #     AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)
    #     az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin
        
    #     # testing helm 3
    #     # kubectl apply -f https://raw.githubusercontent.com/Azure/helm-charts/master/docs/prerequisities/helm-rbac-config.yaml
    #     # helm init --wait --service-account tiller
    
    - name: 'Install Virtual Node on K8s cluster'
      run: |
        # Capture Cluster Info in var
        AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)

        # get kube context
        rm -rf ~/.kube/config
        az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin
        
        # run check for idempotent pipeline
        
        kubectl get nodes | grep "virtual-node-aci-linux"

        if [ $? -eq 0 ]; then
            echo 'Virtual node already exists'
        else
          echo 'Virtual node does not exist. Creating virtual now.'

          # Deploy virtual node 
          az aks enable-addons \
          --resource-group $resourceGroup  \
          --name $AKS_CLUSTER \
          --addons virtual-node \
          --subnet-name VNSubnet
        fi

    - name: 'Create k8s service account'
      env:
        nameSpace: twt
      run: |
        kubectl create namespace $nameSpace
        kubectl label namespace/$nameSpace purpose=prod-app

        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        imagePullSecrets:
        - name: acr-auth
        metadata:
          name: ttsa
          namespace: $nameSpace
        EOF

    - name: 'Checkout TailwindTraders Backend'
      run: |
        git clone https://github.com/microsoft/TailwindTraders-Backend.git

        git -C TailwindTraders-Backend checkout ed86d5f                    
    - name: 'Create Helm values file'
      run: |
        pwsh $tailwindChartValuesScript -resourceGroup $resourceGroup -sqlPwd ${{ secrets.sqlServePassword }} -outputFile $tailwindChartValues

  # buildApplication:
  #   runs-on: self-hosted
  #   needs: deployInfra
  #   steps:
    
  #   # checkout branch
  #   - uses: actions/checkout@master

  #   # log into Azure
  #   - name: 'Login via Azure CLI'
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
    
  #   # docker login
  #   - name: 'Docker Login'
  #     uses: greenie-msft/container-actions/docker-login@master
  #     with:
  #       login-server: ${{ secrets.CONTAINER_REGISTRY }}
  #       username: ${{ secrets.REGISTRY_USERNAME }}
  #       password: ${{ secrets.REGISTRY_PASSWORD }}
    
  #   # build/push docker image
  #   - name: 'build/push'
  #     run: |
  #       docker build Source/Tailwind.Traders.Web/ -t ${{ secrets.CONTAINER_REGISTRY }}/$webappName:$GITHUB_SHA
  #       docker push ${{ secrets.CONTAINER_REGISTRY }}/$webappName:$GITHUB_SHA
  
  deployApplication:
    runs-on: self-hosted
    needs: deployInfra
    steps:
      - name: 'deploy k8s app'
        run: |
          AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)

          INGRESS=$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
          pictures=$(az storage account list -g $resourceGroup --query [0].primaryEndpoints.blob -o tsv)

          helm install --name my-tt-login -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/login.api --set image.tag=$containerVersion --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/login-api
          helm install --name my-tt-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/product.api --set image.tag=$containerVersion --set inf.storage.productimages=${pictures}product-list --set inf.storage.productdetailimages=${pictures}product-detail $tailwindCharts/products-api
          helm install --name my-tt-coupon -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/coupon.api --set image.tag=$containerVersion --set inf.storage.couponimage=${pictures}coupon-list $tailwindCharts/coupons-api
          helm install --name my-tt-profile -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/profile.api --set image.tag=$containerVersion --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/profiles-api
          helm install --name my-tt-popular-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/popular-product.api --set image.tag=$containerVersion --set initImage.repository=$containerRegistry/popular-product-seed.api --set initImage.tag=latest --set inf.storage.productimages=${pictures}product-list $tailwindCharts/popular-products-api
          helm install --name my-tt-stock -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/stock.api --set image.tag=$containerVersion $tailwindCharts/stock-api
          helm install --name my-tt-image-classifier -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/image-classifier.api --set image.tag=$containerVersion $tailwindCharts/image-classifier-api
          helm install --name my-tt-cart -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/cart.api --set image.tag=$containerVersion $tailwindCharts/cart-api
          helm install --name my-tt-mobilebff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/mobileapigw --set image.tag=$containerVersion --set probes.readiness=null $tailwindCharts/mobilebff
          helm install --name my-tt-webbff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/webapigw --set image.tag=$containerVersion $tailwindCharts/webbff

          git clone https://github.com/neilpeterson/TailwindTraders-Website.git
          helm install --name web -f TailwindTraders-Website/Deploy/helm/gvalues.yaml --namespace=$nameSpace --set ingress.protocol=http --set ingress.hosts={$INGRESS} --set image.repository=$containerRegistry/web --set image.tag=v1 TailwindTraders-Website/Deploy/helm/web/
      
      - name: 'Label all pods for network policy'
        run: |
          x=$(kubectl get pods -n twt -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{"\t"}{end}' |sort)
          for i in $x
          do
            kubectl label -n twt pods $i role=twt-app
          done

      - name: 'Copy website images to storage'
        run: |
          STORAGE=$(az storage account list -g $resourceGroup -o table --query  [].name -o tsv)
          BLOB_ENDPOINT=$(az storage account list -g $resourceGroup --query [].primaryEndpoints.blob -o tsv)
          CONNECTION_STRING=$(az storage account show-connection-string -n $STORAGE -g $resourceGroup -o tsv)
          az storage container create --name "coupon-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-detail" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "profiles-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination coupon-list  --source $tailwindWebImages/coupon-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-detail --source $tailwindWebImages/product-detail --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-list --source $tailwindWebImages/product-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination profiles-list --source $tailwindWebImages/profiles-list --account-name $STORAGE

      - name: 'Setup scaling backend components'
        run: |
          git clone https://github.com/kedacore/keda.git
          git -C keda checkout 6ee8f18
          helm install --name keda --namespace keda ./keda/chart/keda/ -f ./keda/chart/keda/values.yaml 


          helm install --name rabbitmq --set rabbitmq.username=user,rabbitmq.password=PASSWORD stable/rabbitmq

          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: rabbitmq-consumer
            namespace: default
            labels:
              app: rabbitmq-consumer
          spec:
            selector:
              matchLabels:
                app: rabbitmq-consumer
            template:
              metadata:
                labels:
                  app: rabbitmq-consumer
              spec:
                containers:
                - name: rabbitmq-consumer
                  image: jeffhollan/rabbitmq-client:dev
                  imagePullPolicy: Always
                  command:
                    - receive
                  args:
                    - 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
                dnsPolicy: ClusterFirst
                nodeSelector:
                  kubernetes.io/role: agent
                  beta.kubernetes.io/os: linux
                  type: virtual-kubelet
                tolerations:
                - key: virtual-kubelet.io/provider
                  operator: Exists
                - key: azure.com/aci
                  effect: NoSchedule      
          ---
          apiVersion: keda.k8s.io/v1alpha1
          kind: ScaledObject
          metadata:
            name: rabbitmq-consumer
            namespace: default
            labels:
              deploymentName: rabbitmq-consumer
          spec:
            scaleTargetRef:
              deploymentName: rabbitmq-consumer
            pollingInterval: 5   # Optional. Default: 30 seconds
            cooldownPeriod: 30   # Optional. Default: 300 seconds
            maxReplicaCount: 30  # Optional. Default: 100
            triggers:
            - type: rabbitmq
              metadata:
                queueName: hello
                host: 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
                queueLength  : '5'
          EOF
      - name: 'Notes'
        run: |
          echo "*************** Connection Information ***************"
          echo "The Tailwind Traders Website can be accessed at:"
          echo "http://$INGRESS"
          echo ""
          echo "Run the following to connect to the AKS cluster:"
          echo "az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin"
          echo "******************************************************"
      # logout
      - name: 'Azure logout'
        run: |
          az logout